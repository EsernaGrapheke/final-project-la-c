from time import sleep

maze = [['X','X','X','X','X','X','X','X'],
        ['X',' ',' ','S',' ',' ',' ','X'],
        ['X',' ','X','X','X','X',' ','X'],
        ['X',' ','X',' ',' ',' ',' ','X'],
        ['X',' ','X',' ','X','X','X','X'],
        ['X',' ','X',' ',' ','X',' ','X'],
        ['X',' ',' ',' ',' ',' ',' ','X'],
        ['X','X','X','X','X','X','E','X'],
        ['X','X','X','X','X','X','X','X']]

row=0 
numberofPath=0
while row<len(maze(0)):
    if maze[row][column]=='E':
        entrancerow=row
        entrancecolumn=column
        row+=1
        column+=1
def drawMatrix(matrix):
    """
    Show the matrix in the screen
    :param matrix: any 2D matrix of any size
    """
    for row in matrix:
        for column in row:
            print(column, end='')
        print()
    sleep(0.5)
def copyMatrix(matrix):
    """
    Copy a matrix
    :param matrix: any 2D matrix of any size
    :return: a copy of the matrix
    """
    matrixCopied = []
    for row in matrix:
        matrixCopied.append([])
        for column in row:
            matrixCopied[-1].append(column)
        return matrixCopied
def copyList(catalogue):
    """
    Copy a list
    :param catalogue: any list of any size
    :return: a copy of the list
    """
    catalogueCopied = []
    for element in catalogue:
        catalogueCopied.append(element)
    return catalogueCopied
def checkIfNextToSolution(matrix, xcoordinate, ycoordinate):
    """
    Check if the current position is next to the solution
    :param matrix: any 2D matrix of any size
    :param xcoordinate: the x coordinate of the current possition
    :param ycoordinate: the y coordinate of the current possition
    :return: True if the current possition is next to the solution, False otherwise
    """

    if matrix[xcoordinate][ycoordinate - 1] == 'S' or \
        matrix[xcoordinate - 1][ycoordinate] == 'S' or\
        tempMatrix[xcoordinate][ycoordinate + 1] == 'S' or \
        tempMatrix[xcoordinate + 1][ycoordinate] == 'S':
        return True
    else:
        return False

 tempMatrix = copyMatrix(maze)
 optimalSteps = 10000
 solution = [[]]
 drawMatrix(solution)
 print("Optimal number of steps:", optimalSteps)
